package com.stackroute.newsapp.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.stackroute.newsapp.domain.News;
import com.stackroute.newsapp.exception.NewsAlreadyExistsException;
import com.stackroute.newsapp.exception.NewsNotFoundException;
import com.stackroute.newsapp.service.NewsService;

import io.jsonwebtoken.Jwts;

/**
 * This Controller Class is responsible for User Operations.
 * 
 * @author ubuntu
 *
 */
@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping(path = "/api/v1/newsservice")
public class NewsController {

	@Autowired
	NewsService newsService;

	/**
	 * This Method return Username from the HttpServeletRequest.
	 * 
	 * @param request
	 * @return String
	 * @throws Exception
	 */
	private String getUsername(HttpServletRequest request) throws Exception {
		try {
			final String authHeader = request.getHeader("authorization");
			final String token = authHeader.substring(7);
			String username = Jwts.parser().setSigningKey("secretkey").parseClaimsJws(token).getBody().getSubject();
			return username;
		} catch (Exception e) {
			throw new Exception("Invalid Hedders. Hesder not found.");
		}
	}

	/**
	 * This Method is used to save News into newsDb.
	 * 
	 * @param news
	 * @param request
	 * @param response
	 * @return news
	 * @throws Exception
	 */
	@PostMapping("/news")
	public ResponseEntity<?> saveNews(@RequestBody News news, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			String username = getUsername(request);
			news.setUsername(username);
			newsService.saveNews(news);
		} catch (NewsAlreadyExistsException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.CONFLICT);
		}
		return new ResponseEntity<News>(news, HttpStatus.OK);

	}

	/**
	 * This Method is to update News, which are already exists in newsDb.
	 * 
	 * @param title
	 * @param request
	 * @param response
	 * @param news
	 * @return news
	 * @throws Exception
	 */
	@PutMapping("/news/{title}")
	public ResponseEntity<?> updateNews(@PathVariable("title") String title, HttpServletRequest request,
			HttpServletResponse response, @RequestBody News news) throws Exception {
		try {
			String username = getUsername(request);
			news.setUsername(username);
			int newsId = newsService.getNewsIdByUsernameAndTitle(username, title);
			if (newsId == 0) {
				throw new NewsNotFoundException(
						"News Not found with title:" + title + ". in the user: " + username + " List");
			}
			newsService.updateNews(newsId, news);
		} catch (NewsNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<News>(news, HttpStatus.OK);
	}

	/**
	 * This Method is used to delete News from newsDb.
	 * 
	 * @param title
	 * @param request
	 * @return string
	 * @throws Exception
	 */
	@DeleteMapping("/news/{title}")
	public ResponseEntity<?> deleteNewsByTitle(@PathVariable("title") String title, HttpServletRequest request)
			throws Exception {

		try {
			String username = getUsername(request);
			int newsId = newsService.getNewsIdByUsernameAndTitle(username, title);
			System.out.println("NewsId =======>" + newsId);
			newsService.deleteNews(newsId);
			return new ResponseEntity<String>("Delete Sucessfully", HttpStatus.OK);

		} catch (NewsNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}

	}

	/**
	 * This Method is to fetch News by using Title and Username.
	 * 
	 * @param title
	 * @param request
	 * @return news
	 * @throws Exception
	 */
	@GetMapping("/news/{title}")
	public ResponseEntity<?> fetechNewsByTitle(@PathVariable("title") String title, HttpServletRequest request)
			throws Exception {
		News news;
		try {
			System.out.println("FetchNewsByTitle method called");
			String username = getUsername(request);
			System.out.println(username);
			int newsId = newsService.getNewsIdByUsernameAndTitle(username, title);
			System.out.println(newsId);
			news = newsService.getNewsByNewsId(newsId);

		} catch (NewsNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<News>(news, HttpStatus.OK);
	}

	/**
	 * This Method is used to fetch all news stored by login User
	 * 
	 * @param request
	 * @param response
	 * @return List<News>
	 * @throws Exception
	 */

	@GetMapping("/news")
	public List<News> fetchMyNews(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String username = getUsername(request);
		List<News> newsSet = newsService.getNews(username);
		return newsSet;
	}

	/**
	 * This Method is used for fetch news for External user, which are added by
	 * Admin.
	 * 
	 * @param request
	 * @param response
	 * @return List<News>
	 */
	@GetMapping("/news/external")
	public List<News> fetchNewsForExternal(HttpServletRequest request, HttpServletResponse response) {
		String username = "admin";
		List<News> newsSet = newsService.getNews(username);
		return newsSet;
	}

}
