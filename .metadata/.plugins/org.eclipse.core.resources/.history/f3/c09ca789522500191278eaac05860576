package com.stackroute.newsapp.controller;

import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

import com.stackroute.newsapp.domain.News;
import com.stackroute.newsapp.exception.NewsAlreadyExistsException;
import com.stackroute.newsapp.exception.NewsNotFoundException;
import com.stackroute.newsapp.service.NewsService;

import io.jsonwebtoken.Jwts;

@RestController
@EnableWebMvc
@CrossOrigin("*")
@RequestMapping("/api/v1/newsservice")
public class NewsController {

	@Autowired
	NewsService newsService;

	private String getUsername(HttpServletRequest request) throws Exception {
		try {
			final String authHeader = request.getHeader("authorization");
			final String token = authHeader.substring(7);
			String username = Jwts.parser().setSigningKey("secretkey").parseClaimsJws(token).getBody().getSubject();
			return username;
		} catch (Exception e) {
			throw new Exception("Invalid Hedders. Hesder not found.");
		}
	}

	@PostMapping("/news")
	public ResponseEntity<?> saveNews(@RequestBody News news, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			String username = getUsername(request);
			news.setUsername(username);
			newsService.saveNews(news);
		} catch (NewsAlreadyExistsException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.CONFLICT);
		}
		return new ResponseEntity<News>(news, HttpStatus.OK);

	}

	@PutMapping("/news/{title}")
	public ResponseEntity<?> updateNews(@PathVariable("title") String title, HttpServletRequest request,
			@RequestBody News news) throws Exception {
		try {
			String username = getUsername(request);
			news.setUsername(username);
			int newsId = newsService.getNewsIdByUsernameAndTitle(username, title);
			newsService.updateNews(newsId, news);
		} catch (NewsNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<News>(news, HttpStatus.OK);
	}

	@DeleteMapping("/news/{title}")
	public ResponseEntity<?> deleteNewsByTitle(@PathVariable("title") String title, HttpServletRequest request)
			throws Exception {

		try {
			String username = getUsername(request);
			int newsId = newsService.getNewsIdByUsernameAndTitle(username, title);
			newsService.deleteNews(newsId);

		} catch (NewsNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<String>("Delete Sucessfully", HttpStatus.OK);
	}

	@GetMapping("/news/{title)")
	public ResponseEntity<?> fetechNewsByTitle(@PathVariable("title") String title, HttpServletRequest request)
			throws Exception {
		News news;
		try {
			String username = getUsername(request);
			int newsId = newsService.getNewsIdByUsernameAndTitle(username, title);
			news = newsService.getNewsByNewsId(newsId);
		} catch (NewsNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<News>(news, HttpStatus.OK);
	}

	@GetMapping("/news")
	public Set<News> fetchMyNews(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String username = getUsername(request);
		Set<News> newsSet = newsService.getNews(username);
		return newsSet;
	}

}
