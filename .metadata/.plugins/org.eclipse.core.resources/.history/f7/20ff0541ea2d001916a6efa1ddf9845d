package com.stackroute.newsapp.service;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.stackroute.newsapp.domain.News;
import com.stackroute.newsapp.exception.NewsAlreadyExistsException;
import com.stackroute.newsapp.exception.NewsNotFoundException;
import com.stackroute.newsapp.repository.NewsRepository;

@Service
public class NewsServiceImpl implements NewsService{

	@Autowired
	NewsRepository newsRepository;
	
	@Override
	public News updateNews(int newsId, News updatedNews) throws NewsNotFoundException {
		final News news = newsRepository.findById(newsId).orElse(null);
		if(news == null){
			throw new NewsNotFoundException("Not Able to found News to update...");
		}
		populateUpdatedData(news,updatedNews);
		newsRepository.save(news);
		return news;
	}
	
	private void populateUpdatedData(News oldNews, News newNews) {
		oldNews.setAuthor(newNews.getAuthor());
		oldNews.setContent(newNews.getContent());
		oldNews.setDescription(newNews.getDescription());
		oldNews.setPublishedAt(newNews.getPublishedAt());
		oldNews.setTitle(newNews.getTitle());
		oldNews.setUrl(newNews.getUrl());
		oldNews.setUrlToImage(newNews.getUrlToImage());
		oldNews.setUsername(newNews.getUsername());
	}

	@Override
	public boolean deleteNews(int newsId) throws NewsNotFoundException {
		final News news = newsRepository.findById(newsId).orElse(null);
		if(news == null){
			throw new NewsNotFoundException("Not Able to found News to delete...");
		}
		newsRepository.delete(news);
		return true;
	}

	@Override
	public List<News> getNews(String username) {
		return newsRepository.findByUsername(username);
	}
	
	@Override
	public int getNewsIdByUsernameAndTitle(String username, String title) {
		List<News> newsSet = getNews(username);
		int newsId = 0;
		for(News news : newsSet){
			if(title.equals(news.getTitle())){
				newsId = news.getNewsId();
				break;
			}
		}
		
		return newsId;
	}

	@Override
	public boolean saveNews(News news) throws NewsAlreadyExistsException, NewsNotFoundException {
		final Optional<News> exists = newsRepository.findById(news.getNewsId());
		final News exist = getNewsByUsernameAndTitle(news.getUsername(),news.getTitle());
		if(exists.isPresent() || exist != null){
			throw new NewsAlreadyExistsException("News can not be saved. News Alredy exists.");
		}
		
		newsRepository.save(news);
		return true;
	}

	@Override
	public News getNewsByNewsId(int newsId) {
		return newsRepository.findById(newsId).orElse(null);
	}


	@Override
	public News getNewsByUsernameAndTitle(String username, String title) throws NewsNotFoundException {
		List<News> newsSet = getNews( username);
		News news = null;
		for(News newsset: newsSet){
			if(title.equals(newsset.getTitle())){
				news = newsset;
			}
		}
		return news;
	}

	
	
}
